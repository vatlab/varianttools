# Copyright (C) 2013 Bo Peng (bpeng@mdanderson.org)
# Distributed under GPL. see <http://www.gnu.org/licenses/>
#
# Please refer to http://varianttools.sourceforge.net/Pipeline/New for
# a description of the format of this file.

[pipeline description]
description=Pipelines to detect different types of variants that are transmitted
  from parents to offspring.

denovo_description=This pipeline identifies de novo mutations from a
  family of unaffected parents, affected offspring, and optional unaffected
  siblings. It can be applied either to the current project (no --input is
  specified), or a snapshot (--input) for which the snapshot will be loaded
  and overwrite the existing project. The parameter --parents and --offspring
  are required to specify the name of parents, proband (affected offspring),
  and one optional sibling. Parameter --name is recommended to give all variant tables
  a prefix. This pipeline will produce tables $name_denovo (variants
  that are observed only in the proband), A table $name_denovo_SNP will be created with all SNP markers
  in table $name_denovo. And, depending on values of parameter
  --databases, it can produce tables $table_1kg for variants in 1000 genomes
  project, $table_dbSNP for variants in dbSNP project, and $table_refGene,
  $table_refGene_exon, $table_ccdsGene, $table_ccdsGene_exon, $table_CancerGenomeCensus,
  $table_COSMIC, $table_dbNSFP, $table_phastCons, $table_phastConsElements,
  $table_genomicSuperDups for tables in respective annotation databases. It is
  up to you to select variants based on these membership tables using the
  'vtools compare' command.  The project will be saved to a snapshot if a
  name (or filename with extension .tar or .tar.gz) is specified as the output.

recessive_description=This pipeline identifies recessive mutations from a
  family of unaffected parents, affected offspring, and optional unaffected
  siblings. Recessive variant is defined as variants that are homozygous in
  the affected offspring (proband), heterozygous in both parents, and
  heterozygous or wildtype in a sibling (if available). The pipeline
  can be applied either to the current project (no --input is
  specified), or a snapshot (--input) for which the snapshot will be loaded
  and overwrite the existing project. The parameter --parents and --offspring
  are required to specify the name of parents, proband (affected offspring),
  and one optional sibling. Parameter --name is recommended to give all variant tables
  a prefix. This pipeline will produce tables $name_recessive (variants
  that are observed only in the proband). A table $name_denovo_SNP will be created with all SNP
  markers in table $name_denovo. And, depending on values of parameter
  --databases, it can produce tables $table_1kg for variants in 1000 genomes
  project, $table_dbSNP for variants in dbSNP project, and $table_refGene,
  $table_refGene_exon, $table_ccdsGene, $table_ccdsGene_exon, $table_CancerGenomeCensus,
  $table_COSMIC, $table_dbNSFP, $table_phastCons, $table_phastConsElements,
  $table_genomicSuperDups for tables in respective annotation databases. It is
  up to you to select variants based on these membership tables using the
  'vtools compare' command.  Two optional output files are allowed. The project
  will be saved to a snapshot if a name (or filename with extension .tar or
  .tar.gz) is specified as the output.


# inconsistent_description=This pipeline identifies variants that are inconsistent
#   across members of a family, which includes, 1) homozygous parent with wildtype
#   offspring, 2) double homozygous parents with wildtype or heterzygous offspring,
#   3) wildtype parents with heterozygous or homozygous offspring (de novo),
#   4) homozygous variants on chromosome Y. If
#   there are multiple variants at a location,
#   recessive mutations from a
#   family of unaffected parents, affected offspring, and optional unaffected
#   siblings. Recessive variant is defined as variants that are homozygous in
#   the affected offspring (proband), heterozygous in both parents, and
#   heterozygous or wildtype in a sibling (if available). The pipeline
#   can be applied either to the current project (no --input is
#   specified), or a snapshot (--input) for which the snapshot will be loaded
#   and overwrite the existing project. The parameter --samples is required to
#   specify the name of samples in the order of parents, proband (affected offspring),
#   and one optional sibling. Parameter --name is recommended to give all variant tables
#   a prefix. This pipeline will produce tables $name_recessive (variants
#   that are observed only in the proband), $name_recessive_by_site
#   (variants that are observed in the proband with no variant in parents and
#   sibling at this site). A table $name_denovo_SNP will be created with all SNP
#   markers in table $name_denovo. And, depending on values of parameter
#   --databases, it can produce tables $table_1kg for variants in 1000 genomes
#   project, $table_dbSNP for variants in dbSNP project, and $table_refGene,
#   $table_refGene_exon, $table_ccdsGene, $table_ccdsGene_exon, $table_CancerGenomeCensus,
#   $table_COSMIC, $table_dbNSFP, $table_phastCons, $table_phastConsElements,
#   $table_genomicSuperDups for tables in respective annotation databases. It is
#   up to you to select variants based on these membership tables using the
#   'vtools compare' command.  Two optional output files are allowed. The project
#   will be saved to a snapshot if a name (or filename with extension .tar or
#   .tar.gz) is specified as the output.
#


PAR1=${:"%(parents)s".split(',')[0]}
PAR2=${:'%(parents)s'.split(',')[1]}
PROBAND=${:'%(offspring)s'.split(',')[0]}
SIBLING=${:'' if len('%(offspring)s'.split(','))==1 else '%(offspring)s'.split(',')[1]}



[DEFAULT]
parents=
samples_comment=Name of samples for two parents.

offspring=
samples_comment=Name of one or two samples for offspring. The proband should
  be the first offspring.

name=family
name_comment=Name of the family. All generated tables will be prefixed with
  this name.

databases=thousandGenomes,dbSNP,refGene,ccdsGene,refGene_exon,ccdsGene_exon,CosmicCodingMuts,CosmicNonCodingVariants,dbNSFP,phastCons,phastConsElements,genomicSuperDups
databases_comment=Databases for which membership tables will be produced.

[denovo_0]
# if there is CMD_INPUT, treat it as a snapshot, otherwise take the project
# database as step input
input=${CMD_INPUT: CMD_INPUT if CMD_INPUT else glob.glob('*.proj')}
input_emitter=EmitInput(select=${INPUT0: not INPUT0[0].endswith('.proj')})
action=RunCommand(cmd='vtools admin --load_snapshot ${CMD_INPUT}')
comment=Load specified snapshot if a snapshot is specified. Otherwise use the
   existing project.

[*_1]
action=ImportModules('transmission.py')
comment=Import a utility function from transmission.py.

[denovo_5]
action=CheckVariantToolsVersion('2.2.1')
comment=Check the version of variant tools (version 2.2.1 and above is required
    to execute this pipeline)

[denovo_10]
action=RunCommand(cmd=['vtools use ' + x for x in '%(databases)s'.split(',') ])
comment=Import all annotation databases

[denovo_20]
action=RunCommand(cmd=([
    'vtools_report transmission --parents "${PAR1}" "${PAR2}" --offspring "${PROBAND}" "${SIBLING}"
        --denovo "%(name)s_denovo_${PROBAND}" "%(name)s_denovo_${SIBLING}"',
    'vtools compare "%(name)s_denovo_${PROBAND}" "%(name)s_denovo_${SIBLING}" --difference  "%(name)s_denovo"' ]
    if '${SIBLING}' else [
    'vtools_report transmission --parents "${PAR1}" "${PAR2}" --offspring "${PROBAND}"
        --denovo "%(name)s_denovo"']) + [
    '''vtools select "%(name)s_denovo" "length(ref)=1" "length(alt)=1" "ref!='-'" "alt!='-'"
    --to_table "%(name)s_denovo_SNP" "Recessive SNP markers for family %(name)s" '''
    ])
comment=Locate de novo variants of the proband


[denovo_50]
action=RunCommand(cmd=[
    '''vtools select "%(name)s_denovo" "%%s.chr IS NOT NULL"
    --to_table "%(name)s_denovo_in_%%s" "de novo variants in database %%s"''' %% (x, x, x)
    for x in [os.path.basename(z).split('.')[0] for z in '%(databases)s'.split(',')]
    ])
comment=Create variant tables according to their membership in different annotation databases

[denovo_100]
input_emitter=EmitInput(select=${CMD_OUTPUT: len(CMD_OUTPUT)>0})
action=RunCommand(cmd='''vtools admin --save_snapshot "${CMD_OUTPUT}"
  "snapshot after identification of de novo variants for family %(name)s" ''')
comment=Save the project to a snapshot if an output is specified.

[denovo_200]
action=OutputText(text=[
    "SUMMARY: Identification of de novo variants for family %(name)s",
    "",
    "Members:\n${PAR1} ${PAR2} (unaffected parents), ${PROBAND} (affected offspring)" + ("${SIBLING} (unaffected sibling)" if '${SIBLING}' else ""),
    "",
    "Number of genotypes:",
    "${:projInfo(samples=['${PAR1}', '${PAR2}', '${PROBAND}'] + (['${SIBLING}'] if '${SIBLING}' else []))}",
    "",
    "de novo variants:",
    "${:projInfo(tables=['%(name)s_denovo', '%(name)s_denovo_SNP'])}",
    "",
    "Database membership:",
    "${:projInfo(tables=["%(name)s_denovo_in_%%s"  %% x for x in [os.path.basename(z).split('.')[0] for z in '%(databases)s'.split(',')]])}",
    ""]
  )
comment=Summarize the results.



[recessive_0]
# if there is CMD_INPUT, treat it as a snapshot, otherwise take the project
# database as step input
input=${CMD_INPUT: CMD_INPUT if CMD_INPUT else glob.glob('*.proj')}
input_emitter=EmitInput(select=${INPUT0: not INPUT0[0].endswith('.proj')})
action=RunCommand(cmd='vtools admin --load_snapshot ${CMD_INPUT}')
comment=Load specified snapshot if a snapshot is specified. Otherwise use the
   existing project.

[recessive_5]
action=CheckVariantToolsVersion('2.2.1')
comment=Check the version of variant tools (version 2.2.1 and above is required
    to execute this pipeline)

[recessive_10]
action=RunCommand(cmd=['vtools use ' + x for x in '%(databases)s'.split(',') ])
comment=Import all annotation databases

[recessive_20]
action=RunCommand(cmd=([
    'vtools_report transmission --parents "${PAR1}" "${PAR2}" --offspring "${PROBAND}" "${SIBLING}"
        --recessive "%(name)s_recessive_${PROBAND}" "%(name)s_recessive_${SIBLING}"',
    'vtools compare "%(name)s_recessive_${PROBAND}" "%(name)s_recessive_${SIBLING}" --difference  "%(name)s_recessive"' ]
    if '${SIBLING}' else [
    'vtools_report transmission --parents "${PAR1}" "${PAR2}" --offspring "${PROBAND}"
        --recessive "%(name)s_recessive"']) + [
    '''vtools select "%(name)s_recessive" "length(ref)=1" "length(alt)=1" "ref!='-'" "alt!='-'"
    --to_table "%(name)s_recessive_SNP" "Recessive SNP markers for family %(name)s" '''
    ])
comment=Locate recessive variants of the proband (homozygous only in proband)
  and save variants in table $name_recessive

[recessive_50]
action=RunCommand(cmd=[
    '''vtools select "%(name)s_recessive" "%%s.chr IS NOT NULL"
    --to_table "%(name)s_recessive_in_%%s" "recessive variants in database %%s"''' %% (x, x, x)
    for x in [os.path.basename(z).split('.')[0] for z in '%(databases)s'.split(',')]
    ])
comment=Create variant tables according to their membership in different annotation databases

[recessive_100]
input_emitter=EmitInput(select=${CMD_OUTPUT: len(CMD_OUTPUT)>0})
action=RunCommand(cmd='''vtools admin --save_snapshot "${CMD_OUTPUT}"
    "snapshot after identification of recessive variants for family %(name)s" ''')
comment=Save the project to a snapshot if an output is specified.

[recessive_200]
action=OutputText(text=[
    "SUMMARY: Identification of recessive variants for family %(name)s",
    "",
    "Members:\n${PAR1} ${PAR2} (unaffected parents), ${PROBAND} (affected offspring)" + ("${SIBLING} (unaffected sibling)" if '${SIBLING}' else ""),
    "",
    "Number of genotypes:",
    "${:projInfo(samples=['${PAR1}', '${PAR2}', '${PROBAND}'] + (['${SIBLING}'] if '${SIBLING}' else []))}",
    "",
    "Recessive variants:",
    "${:projInfo(tables=['%(name)s_recessive', '%(name)s_recessive_SNP'])}",
    "",
    "Database membership:",
    "${:projInfo(tables=["%(name)s_recessive_in_%%s"  %% x for x in [os.path.basename(z).split('.')[0] for z in '%(databases)s'.split(',')]])}",
    ""]
  )
comment=Summarize the results.
