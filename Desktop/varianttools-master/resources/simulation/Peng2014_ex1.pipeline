# Copyright (C) 2013 Bo Peng (bpeng@mdanderson.org)
# Distributed under GPL. see <http://www.gnu.org/licenses/>
#
# Please refer to http://varianttools.sourceforge.net/Simulation/New for
# a description of the format of this file.

[pipeline description]
description=Simulations of DNA sequences in specified regions using different
    simulation methods, for the first example in paper "Reproducible
	Simulations of realistic samples for next-gen sequencing studies
	using Variant Simulation Tools". The simulated populations are analyzed
	and discarded to save diskspace.

ms_description=This simulator calls ms to execute coalescent-based simulations,
    create a population with simulated dataset and run through the same statistical
	analysis as other pipeline.

neutral_description=A neutral simulation using a Juke-Cantor (1969) DNA
    nucleotide mutation model, a mutation rate of 1.8x10^-8, a fine-scale
	recombination map, a demographic model that mimicks the European
	population, and no natural selelction.

with_selection_description=A simulation that uses identical models as the neutral
	model but use a protein selection model with selection pressure 0.005,
	0.02 and 0.1 for missense, stoploss and stopgain mutations.

resample_description=A simulation model that extracts genotypes within the
	sepecified regions from the 1000 genomes project, and expands it very
	rapidly to mimick a resampling-based simulation.

[DEFAULT]
regions=chr17:41200001-41263000
regions_comment=One or more chromosome regions (separated by ',') in the format of
  chr:start-end (e.g. chr21:33031597-33041570), or Field:Value from a region-based
  annotation database (e.g. refGene.name2:TRIM2 or refGene_exon.name:NM_000947).
  Please visit http://varianttools.sourceforge.net/Simulation for detailed
  description of this parameter.

scale=10
scale_comment=Scaling factor to speed up the simulation by scaling down the
  simulation while boosting mutation, selection and recombination rates.

extracted_vcf=extracted.vcf
extracted_vcf_comment=Filename (with dir) to save genotypes (.vcf file extracted by tabix
  command) for the resample model. This file will be automatically created and
  reused if it already exists. You will need to remove this file if you run the
  same pipeline using another region.

[*_0]
action=CheckVariantToolsVersion('2.3.1')
comment=Check the version of variant tools. Version 2.3.1 or higher is required
	for the execution of this simulation.

[*_1]
action=ImportModules(['variant_tools.simulation', 'simuPOP.demography'])
comment=Import required modules.

[ms_5]
action=CheckCommands('ms')
comment=Check the existence of command ms

[ms_10]
input_emitter=EmitInput(select=${:not glob.glob('*.proj')})
action=RunCommand('vtools init Peng2014_ex1')
comment=Create a new project if there is no existing project under the current
	directory.

[ms_20]
# this is the command to use for this particular simulation.
action=RunCommand('ms 1400 1 -t 4082.4 -G 46065.49 -eG 1.028e-4 0.0 -seeds ${seed} ${seed:int(seed)+1} ${seed:int(seed)+2} > cache/ex1_ms_${seed}.ms || :',
	output='cache/ex1_ms_${seed}.ms')
comment=Execute ms. NOTE that these parameters only matches the parameters used
    in example 1 of Peng 2014.

[ms_30]
action=CreatePopulation(
    importGenotypeFrom='${INPUT}',
	regions='%(regions)s',
	output='cache/ex1_ms_${seed}.pop')
output='cache/ex1_ms_${seed}.pop'
comment=Create an empty simuPOP population for specified regions and import
	ms-simulated genotypes. The segregating sites are distributed within the specified
	region according to the positions (float numbers from 0 to 1) assigned by ms.
	Mutants are assumed to be from A->C, C->G, G->T and T->A for bases A, C, G and
	T respectively.

[ms_50]
action=OutputPopulationStatistics(mut_count=['ex1_ms_freq_spec_${seed}.txt', 700])
comment=Get allele frequency spectrum in a sample of 700 individuals.

[ms_999]
action=RemoveIntermediateFiles(['cache/ex1_ms_${seed}.pop', 'cache/ex1_ms_${seed}.ms'])
comment=Remove intermediate populations to save diskspace.


[neutral_10]
input_emitter=EmitInput(select=${:not glob.glob('*.proj')})
action=RunCommand('vtools init Peng2014_ex1')
comment=Create a new project if there is no existing project under the current
	directory.

[neutral_20]
action=RunCommand('vtools use refGene')
comment=Link the refGene database to the project. This database is required
	to parse the regions for gene structure.

[neutral_30]
action=CreatePopulation(
	size=1000,
	regions='%(regions)s',
	output='cache/ex1_neutral_init_${seed}.pop')
output='cache/ex1_neutral_init_${seed}.pop'
comment=Create an empty simuPOP population for specified regions.

[neutral_40]
action=EvolvePopulation(
	output='ex1_neutral_evolved_${seed}.pop',
	mutator=RefGenomeMutator(regions='%(regions)s', model='JC69', rate=[1.8e-8 * %(scale)s * 4. / 3.]),
	transmitter=FineScaleRecombinator(regions='%(regions)s', scale=%(scale)s),
	demoModel=MultiStageModel([
        InstantChangeModel(T=81000 // %(scale)s, N0=8100 // %(scale)s,
			G=[70000 // %(scale)s, 71000 // %(scale)s], NG=[7900 // %(scale)s, 8100 // %(scale)s]),
        ExponentialGrowthModel(T=370 // %(scale)s, NT=900000 // %(scale)s)
     ]))
comment=Evolve and expand the population using a JC69 mutation model
	and a demographic model that evolves a population of size 8100 for
	81000 generations before it is expanded to size 900000 in 370 generations.

[neutral_50]
action=OutputPopulationStatistics(
	mut_count=['ex1_neutral_freq_spec_${seed}.txt', 700],
	)
comment=Get allele frequency spectrum in a sample of 700 individuals.

[neutral_999]
action=RemoveIntermediateFiles(['ex1_neutral_evolved_${seed}.pop', 'cache/ex1_neutral_init_${seed}.pop'])
comment=Remove intermediate populations to save diskspace.


[with_selection_10]
input_emitter=EmitInput(select=${:not glob.glob('*.proj')})
action=RunCommand('vtools init Peng2014_ex1')
comment=Create a new project if there is no existing project under the current
	directory.

[with_selection_20]
action=RunCommand('vtools use refGene')
comment=Link the refGene database to the project. This database is required
	to parse the regions for gene structure.

[with_selection_30]
action=CreatePopulation(
	size=1000,
	regions='%(regions)s',
	output='cache/ex1_with_selection_init_${seed}.pop')
output='cache/ex1_with_selection_init_${seed}.pop'
comment=Create an empty simuPOP population for specified regions.

[with_selection_40]
action=EvolvePopulation(
	output='ex1_with_selection_evolved_${seed}.pop',
	mutator=RefGenomeMutator(regions='%(regions)s', model='JC69', rate=[1.8e-8 * %(scale)s * 4. / 3.]),
	selector=ProteinSelector('%(regions)s', s_missense=0.005 * %(scale)s,
		s_stoploss=0.02 * %(scale)s, s_stopgain=0.1 * %(scale)s),
	transmitter=FineScaleRecombinator(regions='%(regions)s', scale=%(scale)s),
	demoModel = MultiStageModel([
        InstantChangeModel(T=81000 // %(scale)s, N0=8100 // %(scale)s,
			G=[70000 // %(scale)s, 71000 // %(scale)s], NG=[7900 // %(scale)s, 8100 // %(scale)s]),
        ExponentialGrowthModel(T=370 // %(scale)s, NT=900000 // %(scale)s)
     ]))
comment=Evolve and expand the population using a JC69 mutation model
	and a demographic model that evolves a population of size 8100 for
	81000 generations before it is expanded to size 900000 in 370 generations.

[with_selection_50]
action=OutputPopulationStatistics(
	mut_count=['ex1_with_selection_freq_spec_${seed}.txt', 700],
	)
comment=Get allele frequency spectrum in a sample of 700 individuals.

[with_selection_999]
action=RemoveIntermediateFiles(['ex1_with_selection_evolved_${seed}.pop', 'cache/ex1_with_selection_init_${seed}.pop'])
comment=Remove intermediate populations to save diskspace.


[resample_10]
input_emitter=EmitInput(select=${:not glob.glob('*.proj')})
action=RunCommand('vtools init Peng2014_ex1 --build hg19 -f')
comment=Create a new project if there is no existing project under the current
	directory.

[resample_20]
action=RunCommand('vtools use refGene')
comment=Link the refGene database to the project. This database is required
	to parse the regions for gene structure.


[resample_25]
action=ExtractVCF(
	sourceURL=['ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/ALL.chr{}.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz'.format(x) for x in range(1, 23)],
	regions='%(regions)s',
	output='%(extracted_vcf)s')
input_emitter=EmitInput(select=${:not os.path.isfile('%(extracted_vcf)s')})
output='%(extracted_vcf)s'
comment=Extract genotypes of specified regions from 1000 genomes project. No
    dependency check will be performed so the extracted file can be used by
    other projects if you put is to a place accessible by other projects. Location
    of the extracted file can be specified by option --extracted_file.

[resample_30]
action=CreatePopulation(
	importGenotypeFrom='%(extracted_vcf)s',
	regions='%(regions)s',
	output='cache/ex1_resample_init_${seed}.pop')
output='cache/ex1_resample_init_${seed}.pop'
comment=Create an empty simuPOP population for specified regions.

[resample_40]
action=EvolvePopulation(
	output='ex1_resample_sampled_${seed}.pop',
	mutator=RefGenomeMutator(regions='%(regions)s', model='JC69', rate=[1.8e-8 * %(scale)s * 4. / 3.]),
	selector=ProteinSelector('%(regions)s', s_missense=0.0001 * %(scale)s,
		s_stoploss=0.0001 * %(scale)s, s_stopgain=0.001 * %(scale)s),
	transmitter=FineScaleRecombinator(regions='%(regions)s', scale=%(scale)s),
	demoModel=ExponentialGrowthModel(T=10 // %(scale)s,
		NT=10000 // %(scale)s)
    )
comment=Expand the population exponentially to reach a large population
	in 10 generations. Mutations and recombinations are allowed and
	a selection model that only select against stopgain mutations are
	used.

[resample_50]
action=OutputPopulationStatistics(
	mut_count=['ex1_resample_freq_spec_${seed}.txt', 700],
	)
comment=Get allele frequency spectrum in a sample of 700 individuals.

[resample_999]
action=RemoveIntermediateFiles(['ex1_resample_sampled_${seed}.pop'])
comment=Remove intermediate populations to save diskspace.
